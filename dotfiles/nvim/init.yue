-- Install packer
install_path = "#{vim.fn.stdpath("data")}/site/pack/packer/start/packer.nvim"

if vim.fn.empty(vim.fn.glob(install_path)) > 0
  vim.fn.execute(
    "!git clone https://github.com/wbthomason/packer.nvim #{install_path}")

import "helper"
import "packer" as {:use, :use_rocks, startup: psetup}
import "packer.util" as putil

u = (url, opts = {}, disable = false) ->
  addOpts = opts

  if opts.file
    addOpts.setup = "require('plugins.#{opts.file}').setup()" if opts.setup
    addOpts.config = "require('plugins.#{opts.file}').config()" if not opts.setup or opts.config

  addOpts.disable = disable

  addOpts.file = nil
  addOpts[1] = url
  use(addOpts)

psetup({
  (->
    u("wbthomason/packer.nvim")

    -- color scheme
    u("morhetz/gruvbox", file: "gruvbox")

    -- small text utilities
    u("numToStr/Comment.nvim", file: "comment")
    u("tpope/vim-surround")
    u("tpope/vim-unimpaired")
    u("tpope/vim-repeat")
    u("tpope/vim-abolish")
    u("tpope/vim-characterize")
    u("AndrewRadev/splitjoin.vim", keys: {"gS", "gJ"})
    u("norcalli/nvim-colorizer.lua", file: "colorizer")
    u("lukas-reineke/indent-blankline.nvim", file: "indent-blankline")
    u("windwp/nvim-autopairs", {file: "autopairs", after: "nvim-cmp"})
    u("windwp/nvim-ts-autotag", after: "nvim-treesitter")
    u("rlane/pounce.nvim", file: "pounce")

    -- config
    u("editorconfig/editorconfig-vim", file: "editorconfig")

    -- status line
    u("nvim-lualine/lualine.nvim", {
      file: "lualine"
      requires: {"kyazdani42/nvim-web-devicons"}
    })

    u("nvim-treesitter/nvim-treesitter", {
      file: "treesitter"
      run: ":TSUpdate"
    })
    u("nvim-treesitter/nvim-treesitter-textobjects", {
      file: "treesitter-textobjects"
      requires: "nvim-treesitter/nvim-treesitter"
      after:
        * "which-key.nvim"
        * "nvim-treesitter"
    })
    u("nvim-treesitter/playground", {
      file: "treesitter-playground"
      requires: "nvim-treesitter/nvim-treesitter"
      after: "nvim-treesitter"
    })
    u("ziontee113/syntax-tree-surfer", {
      file: "syntax-tree-surfer"
      after: "nvim-treesitter"
    })

    -- syntax
    u("sheerun/vim-polyglot")
    u("dylon/vim-antlr")
    u("pigpigyyy/Yuescript-vim")

    -- helper
    u("folke/which-key.nvim", file: "which-key")
    u("deris/vim-shot-f")

    -- git
    u("tpope/vim-fugitive", {
      file: "fugitive"
      cmd: {"Git", "GBrowse", "Gdiffsplit",
        "Gwrite", "Gread", "Gedit", "GRename", "GMove"}
    })
    u("tpope/vim-rhubarb", after: "vim-fugitive")
    u("shumphrey/fugitive-gitlab.vim", {
      file: "fugitive-gitlab"
      after: "vim-fugitive"
    })
    u("lewis6991/gitsigns.nvim", {
      file: "gitsigns"
      requires: {"nvim-lua/plenary.nvim"}
      after: "vim-fugitive"
    })
    u("sindrets/diffview.nvim", {
      file: "diffview"
      requires: {"nvim-lua/plenary.nvim"}
    })

    -- file manager
    u("kyazdani42/nvim-tree.lua", {
      file: "tree"
      requires: {"kyazdani42/nvim-web-devicons"}
      after: "which-key.nvim"
    })

    -- fuzzy finder
    u("nvim-telescope/telescope.nvim", {
      file: "telescope"
      requires: {{"nvim-lua/popup.nvim"}, {"nvim-lua/plenary.nvim"}}
      after:
        * "telescope-fzf-native.nvim"
        * "telescope-symbols.nvim"
        * "trouble.nvim"
        * "which-key.nvim"
    })
    u("nvim-telescope/telescope-fzf-native.nvim", run: "make")
    u("nvim-telescope/telescope-symbols.nvim")
    u("nvim-telescope/telescope-dap.nvim", {
      file: "telescope-dap"
      requires: {"nvim-telescope/telescope.nvim", "mfussenegger/nvim-dap"}
      after:
        * "telescope.nvim"
        * "nvim-dap"
    })
    u("stevearc/dressing.nvim", {
      file: "dressing"
      after: "telescope.nvim"
    })

    -- snippets
    u("L3MON4D3/LuaSnip", {
      file: "luasnip"
      after: "which-key.nvim"
    })

    -- lsp
    u("neovim/nvim-lspconfig", {
      file: "lspconfig"
      after:
        * "lsp_signature.nvim"
        * "nvim-cmp"
        * "telescope.nvim"
        * "which-key.nvim"
    })
    u("mfussenegger/nvim-jdtls") -- java
    u("jose-elias-alvarez/null-ls.nvim", {
      file: "null-ls"
      requires: {"nvim-lua/plenary.nvim"}
      after: "nvim-lspconfig"
    })
    u("hrsh7th/nvim-cmp", file: "cmp")
    u("hrsh7th/cmp-buffer")
    u("hrsh7th/cmp-path")
    u("hrsh7th/cmp-calc")
    u("hrsh7th/cmp-cmdline")
    u("saadparwaiz1/cmp_luasnip")
    u("hrsh7th/cmp-omni")
    u("hrsh7th/cmp-nvim-lsp")
    u("tzachar/cmp-tabnine", {
      file: "cmp-tabnine"
      run: "./install.sh"
      after: "nvim-cmp"
    })
    u("ray-x/lsp_signature.nvim")

    -- diagnostics
    u("folke/trouble.nvim", {
      file: "trouble"
      requires: "kyazdani42/nvim-web-devicons"
      after: "which-key.nvim"
    })

    -- dap
    u("mfussenegger/nvim-dap", {
      file: "dap"
      keys: {"<F5>", "<F8>"}
    })
    u("theHamsta/nvim-dap-virtual-text", {
      file: "dap-virtual-text"
      requires: {"mfussenegger/nvim-dap"}
      after: "nvim-dap"
    })
    u("rcarriga/nvim-dap-ui", {
      file: "dap-ui"
      requires: {"mfussenegger/nvim-dap"}
      after: "nvim-dap"
    })

    u("vim-test/vim-test")

    -- tex
    u("lervag/vimtex", file: "vimtex")

    u("jalvesaq/Nvim-R", {
      file: "r"
      after: "which-key.nvim"
    })

    use_rocks("fun")
  )
  config:
    display:
      open_fn: ->
        getResponse = ->
          true, vim.api.nvim_get_current_win(), vim.api.nvim_get_current_buf()

        curBuf = vim.api.nvim_get_current_buf()
        if (vim.api.nvim_buf_get_name(curBuf) == "" and
          vim.fn.getbufvar(curBuf, "&modified") == 0)
          return getResponse()

        vim.cmd('tabnew')
        return getResponse()
})

vim.g.mapleader = "\\"
vim.g.maplocalleader = "|"

helper.setOptions(vim.o, {
  -- hidden changed buffers
  "hidden",
  -- show chars bottom left
  "showcmd",
  -- highlight search
  "hlsearch",
  -- hsow position in file
  "ruler",
  -- confirm closing unsaved files
  "confirm",
  -- line numbers
  "number",
  "relativenumber",
  -- don't break line inside word
  "linebreak",
  -- jump while searching
  "incsearch",
  -- search case
  "ignorecase",
  "smartcase",
  -- gui colors
  "termguicolors",
  -- split buffers bottom right
  "splitbelow",
  "splitright",
  -- save undo history
  "undofile",
  --
  "cursorline",
  -- ! don't use tmp file
  "noshelltemp",

  background: "dark",

  timeoutlen: 500,

  diffopt: "internal,filler,closeoff,vertical",
  completeopt: "menuone,noselect",

  omnifunc: "syntaxcomplete#Complete",

  showbreak: "─→",
  "list",
  listchars: "tab:──,trail:❯,nbsp:˰",
  -- indent
  tabstop: 4,
  shiftwidth: 4,

  -- folding
  foldmethod: "indent",
  foldlevelstart: 99,
  -- scrolling
  scrolljump: -10,
  -- spelling
  spelllang: "de",
  spellfile: "~/.config/nvim/spell/de.utf-8.add",
  -- dict completion
  dictionary: "/usr/share/dict/ngerman,/usr/share/dict/usa",
})

vim.cmd("language en_US.utf8")

require("keymaps")()
require("autocmd")()
