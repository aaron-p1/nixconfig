-- Not allowed to import rocks

export registerPluginWk = (config) ->
  assert(config.map ~= nil, "Map cannot be nil")

  if not package.loaded["which-key"]
    print("Warning: which-key not loaded during registering. #{vim.inspect(config)}")
    return

  import "which-key" as wk

  wk.register(config.map, {
    prefix: config.prefix or "",
    buffer: config.buffer,
  })

export setOptions = (optapi, opts) ->
  for key, val in pairs(opts)
    if tonumber(key)
      isno = val::sub(0, 2) == "no"
      optname = if isno then val::sub(3, #val) else val
      optapi[optname] = not isno
    else
      optapi[key] = val

export startsWith = (str, start) -> str::sub(1, #start) == start
export endsWith = (str, ending) -> ending == "" or str::sub(-#ending) == ending
export remove_suffix = (str, suffix) ->
  if suffix ~= "" and str::sub(-#suffix) == suffix
    str::sub(1, -#suffix - 1)
  else
    str

export remove_index = (list, index) ->
  if index < 1 or index > #list
    return list
  else
    result = table.move(list, 1, index - 1, 1, {})
    table.move(list, index + 1, #list, #result + 1, result)
    return result

export chain = (...) ->
  fnchain = {...}
  (...) ->
    args = {...}
    for fn in *fnchain
      args = { fn(unpack(args)) }
    unpack(args)
