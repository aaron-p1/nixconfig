export config = ->
  import "cmp"
  import "cmp.config.compare" as cc

  cmp.setup({
    sources: {
      {name: "npm"},
      {name: "nvim_lsp", max_item_count: 32},
      {name: "luasnip"},
      -- DEPENDENCIES: fd
      {name: "fuzzy_path", options: {fd_timeout_msec: 1000, fd_cmd: {"fd", "-d", "4", "-p"}}},
      {name: "calc"},
      {name: "cmp_tabnine"},
      {name: "digraphs", max_item_count: 4},
      {name: "buffer"},
    },
    sorting: {
      priority_weight: 2
      comparators:
        * require("cmp_fuzzy_path.compare")
        * cc.offset
        * cc.exact
        * cc.score
        * cc.recently_used
        * cc.kind
        * cc.sort_text
        * cc.length
        * cc.order
    },
    snippet: {
      expand: (args) ->
        import "luasnip"
        luasnip.lsp_expand(args.body)
    },
    mapping: {
      "<C-Space>": cmp.mapping.complete(),
      "<C-y>": cmp.mapping.confirm({
        behavior: cmp.ConfirmBehavior.Replace,
        select: true,
      }),
      "<C-e>": cmp.mapping({
        i: cmp.mapping.abort(),
        c: cmp.mapping.close(),
      }),
      "<M-e>": cmp.mapping.close(),
      "<C-u>": cmp.mapping.scroll_docs(-4),
      "<C-d>": cmp.mapping.scroll_docs(4),
      "<C-n>": cmp.mapping(
        cmp.mapping.select_next_item({behavior: cmp.SelectBehavior.Insert}),
        {"i", "c"}
      ),
      "<C-p>": cmp.mapping(
        cmp.mapping.select_prev_item({behavior: cmp.SelectBehavior.Insert}),
        {"i", "c"}
      ),
      "<Tab>": cmp.mapping(
        cmp.mapping.select_next_item({behavior: cmp.SelectBehavior.Insert}),
        {"c"}
      ),
      "<Up>": cmp.config.disable,
      "<Right>": cmp.config.disable,
      "<Down>": cmp.config.disable,
      "<Left>": cmp.config.disable,
    },
    preselect: cmp.PreselectMode.Item,
    formatting: {
      format: (entry, vim_item) ->
        orig_menu = vim_item.menu
        -- set a name for each source
        vim_item.menu = ({
          npm: "[NPM]",
          nvim_lsp: "[LSP]",
          luasnip: "[SNIP]",
          fuzzy_path: "[P]",
          calc: "[C]",
          cmp_tabnine: "[T9]",
          digraphs: "[DG]",
          buffer: "[B]",
          omni: "[OMNI]",
          copilot: "[COP]",
        })[entry.source.name]

        vim_item.menu = vim_item.menu .. ": " .. orig_menu if orig_menu != nil
        return vim_item
    },
    experimental: {
      ghost_text: true,
    },
  })

  cmp.setup.cmdline("/", {
    sources: {
      {name: "buffer"}
    }
  })

  cmp.setup.cmdline(":", {
    sources: cmp.config.sources({
      {name: "fuzzy_path"},
    }, {
      {name: "cmdline"},
      {name: "cmdline_history", max_item_count: 4},
    }),
  })

  vim.api.nvim_create_autocmd("FileType", {
    pattern: "tex,plaintex",
    callback: ->
      cmp.setup.buffer {
        sources: {
          {name: 'omni'},
          {name: 'luasnip'},
          {name: 'fuzzy_path'},
          {name: 'calc'},
          {name: 'cmp_tabnine'},
          {name: 'buffer'},
        }
      }
  })
