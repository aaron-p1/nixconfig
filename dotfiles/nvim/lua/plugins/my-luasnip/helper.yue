import "luasnip" as ls
import "luasnip.util.events"
import "luasnip.nodes.absolute_indexer" as ai
import "luasnip.extras" as lx
import "luasnip.extras.fmt" as lf
import "luasnip.extras.expand_conditions" as conds

-- LuaSnip
s = ls.snippet
sn = ls.snippet_node
isn = ls.indent_snippet_node
t = ls.text_node
i = ls.insert_node
f = ls.function_node
c = ls.choice_node
d = ls.dynamic_node
r = ls.restore_node

l = lx.lambda
rep = lx.rep
p = lx.partial
m = lx.match
n = lx.nonempty
dl = lx.dynamic_lambda
fmt = lf.fmt
fmta = lf.fmta

-- Helper
-- Nodes
matchCapture = (group, _then, _else) ->
  assert(_then, "You have to pass at least 2 arguments")
  return f((_, snip) ->
    cap = snip.captures[group]
    return if cap ~= nil and cap ~= "" then _then else (_else or ""))

-- types = [ "capture" = nodes ]
applyCapture = (pos, group, types) ->
  d(pos, (_, snip) -> sn(nil, types[snip.captures[group]]))

-- Conditions
firstLine = -> vim.fn.line(".") == 1
firstInFile = (line_to_cursor, matched_trigger) ->
  firstLine() and line_to_cursor == matched_trigger

export default {
  -- LuaSnip
  ls: ls
  s: s
  sn: sn
  isn: isn
  t: t
  i: i
  f: f
  c: c
  d: d
  r: r
  events: events
  ai: ai
  l: l
  rep: rep
  p: p
  m: m
  n: n
  dl: dl
  fmt: fmt
  fmta: fmta
  conds: conds

  -- Helper
  -- Nodes
  mc: matchCapture
  ac: applyCapture

  -- Conditions
  firstLine: firstLine
  firstInFile: firstInFile
}
