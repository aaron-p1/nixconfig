export config = ->
  import "gitsigns" as gs
  import "gitsigns.actions" as ga
  import "helper"

  gs.setup({
    on_attach: (bufnr) ->
      buf_keymap = (mode, key, fn, opts = {}) ->
        opts.buffer = bufnr
        vim.keymap.set(mode, key, fn, opts)

      -- Navigation
      buf_keymap("n", "[c",
        -> if vim.o.diff then "[c" else "<Cmd>Gitsigns prev_hunk<CR>",
       {expr: true})
      buf_keymap("n", "]c",
        -> if vim.o.diff then "]c" else "<Cmd>Gitsigns next_hunk<CR>",
       {expr: true})

      -- Staging
      buf_keymap("n", "<Leader>ghs", gs.stage_hunk)
      buf_keymap("v", "<Leader>ghs",
        -> gs.stage_hunk({vim.fn.line("."), vim.fn.line("v")}))

      -- Reset hunk
      buf_keymap("n", "<Leader>ghu", gs.undo_stage_hunk)
      buf_keymap("n", "<Leader>ghr", gs.reset_hunk)
      buf_keymap("v", "<Leader>ghr",
        -> gs.reset_hunk({vim.fn.line("."), vim.fn.line("v")}))
      buf_keymap("n", "<Leader>gR", gs.reset_buffer)

      -- View
      buf_keymap("n", "<Leader>ghp", gs.preview_hunk)
      buf_keymap("n", "<Leader>gbl", -> gs.blame_line(true))

      buf_keymap({"o", "x"}, "ih", ga.select_hunk)

      helper.registerPluginWk({
        prefix: "<leader>",
        buffer: bufnr,
        map:
          g:
            name: "Git",
            R: "Reset Buffer",
            h:
              name: "Hunk",
              s: "Stage",
              u: "Undo stage",
              r: "Reset",
              p: "Preview",
            b:
              name: "Blame",
              l: "Line",
      })

      helper.registerPluginWk({prefix: "[", buffer: bufnr, map: c: "Prev Change"})
      helper.registerPluginWk({prefix: "]", buffer: bufnr, map: c: "Next Change"}),
    update_debounce: 300,
  })
