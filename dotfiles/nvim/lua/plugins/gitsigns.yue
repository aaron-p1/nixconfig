export config = ->
  import "gitsigns" as gs
  import "gitsigns.actions" as ga
  import "helper"

  gs.setup({
    on_attach: (bufnr) ->
      buf_keymap = (mode, key, fn, opts = {}) ->
        opts.buffer = bufnr
        vim.keymap.set(mode, key, fn, opts)

      -- Navigation
      buf_keymap("n", "[c",
        -> if vim.o.diff then "[c" else "<Cmd>Gitsigns prev_hunk<CR>",
       {expr: true, desc: "Prev Change"})
      buf_keymap("n", "]c",
        -> if vim.o.diff then "]c" else "<Cmd>Gitsigns next_hunk<CR>",
       {expr: true, desc: "Next Change"})

      -- Staging
      buf_keymap("n", "<Leader>ghs", gs.stage_hunk, desc: "Stage")
      buf_keymap("v", "<Leader>ghs",
        (-> gs.stage_hunk({vim.fn.line("."), vim.fn.line("v")})), desc: "Stage")

      -- Reset hunk
      buf_keymap("n", "<Leader>ghu", gs.undo_stage_hunk, desc: "Undo stage")
      buf_keymap("n", "<Leader>ghr", gs.reset_hunk, desc: "Reset")
      buf_keymap("v", "<Leader>ghr",
        (-> gs.reset_hunk({vim.fn.line("."), vim.fn.line("v")})), desc: "Reset")
      buf_keymap("n", "<Leader>gR", gs.reset_buffer, desc: "Reset buffer")

      -- View
      buf_keymap("n", "<Leader>ghp", gs.preview_hunk, desc: "Preview")
      buf_keymap("n", "<Leader>gbl", (-> gs.blame_line(full: true)), desc: "Line")

      buf_keymap({"o", "x"}, "ih", ga.select_hunk, desc: "In hunk")

      helper.registerPluginWk({
        prefix: "<leader>",
        buffer: bufnr,
        map:
          g:
            name: "Git",
            h:
              name: "Hunk",
            b:
              name: "Blame",
      })

    update_debounce: 300,
  })
