servers =
  -- dart
  * server: "dartls"
  -- html
  * server: "html"
    cmd: {"@vscodelsp@/bin/vscode-html-language-server", "--stdio"}
    filetypes: {"html", "blade"}
  -- css
  * server: "cssls"
    cmd: {"@vscodelsp@/bin/vscode-css-language-server", "--stdio"}
  -- php
  * server: "intelephense"
    cmd: {"@intelephense@/bin/intelephense", "--stdio"}
  -- json
  * server: "jsonls"
    cmd: {"@vscodelsp@/bin/vscode-json-language-server", "--stdio"}
  -- yaml
  * server: "yamlls"
    cmd: {"@yamlls@/bin/yaml-language-server", "--stdio"}
  -- vue
  * server: "vuels"
  -- haskell
  * server: "hls"
  -- nix
  * server: "rnix"
    cmd: {"@rnix@/bin/rnix-lsp"}
  -- elixir
  * server: "elixirls"
    filetypes: {"elixir", "eelixir", "heex"}
  -- python
  * server: "pyright"
  -- javascript
  * server: "tsserver"
  -- R
  * server: "r_language_server"

export on_attach = (client, bufnr) ->
  import "helper"
  import "telescope.builtin" as tb
  import "lsp_signature" as ls

  vl = vim.lsp.buf
  vd = vim.lsp.diagnostic

  buf_keymap = (mode, key, desc, fn) -> vim.keymap.set(mode, key, fn, {buffer: bufnr, desc: desc})

  vim.api.nvim_buf_set_option(bufnr, "omnifunc", "v:lua.vim.lsp.omnifunc")

  -- lsp signature
  ls.on_attach({
    bind: true
    hint_prefix: "â†’ "
  })

  -- jump to
  buf_keymap("n", "gdd", "This window", tb.lsp_definitions)
  buf_keymap("n", "gdv", "Vertical split", ->
    vim.api.nvim_command("vsplit")
    tb.lsp_definitions())
  buf_keymap("n", "gdx", "Horizontal split", ->
    vim.api.nvim_command("split")
    tb.lsp_definitions())
  buf_keymap("n", "gdt", "Tab", ->
    vim.api.nvim_command("tab split")
    tb.lsp_definitions())
  buf_keymap("n", "gD", "Declaration", vl.declaration)
  buf_keymap("n", "gi", "Implementations", tb.lsp_implementations)
  buf_keymap("n", "gr", "References", tb.lsp_references)
  buf_keymap("n", "<Leader>lD", "Type definition", vl.type_definition)
  buf_keymap("n", "[d", "Prev diagnostic", vim.diagnostic.goto_prev)
  buf_keymap("n", "]d", "Next diagnostic", vim.diagnostic.goto_next)

  -- show info
  buf_keymap("n", "K", "Hover", vl.hover)
  buf_keymap("n", "<C-K>", "Signature", vl.signature_help)

  buf_keymap("n", "<Leader>lwl", "List",
    -> print(vim.inspect(vl.list_workspace_folders)))
  buf_keymap("n", "<Leader>lwa", "Add folder", vl.add_workspace_folder)
  buf_keymap("n", "<Leader>lwr", "Remove folder", vl.remove_workspace_folder)

  -- edit
  buf_keymap("n", "<Leader>lf", "Format", -> vl.format(async: true))
  buf_keymap("n", "<Leader>lc", "Code action", vl.code_action)
  buf_keymap("v", "<Leader>lc", "Code action", vl.range_code_action)
  buf_keymap("n", "<Leader>lr", "Rename", vl.rename)

  -- which key
  helper.registerPluginWk({
    prefix: "<leader>"
    buffer: bufnr
    map:
      l:
        name: "LSP"
        w:
          name: "Workspace"
  })
  helper.registerPluginWk({
    prefix: "g"
    buffer: bufnr
    map:
      d:
        name: "Definitions"
  })

export getCapabilities = ->
  import "cmp_nvim_lsp" as cnl

  capabilities = vim.lsp.protocol.make_client_capabilities()
  capabilities = cnl.update_capabilities(capabilities)

  return capabilities

export config = ->
  import "lspconfig" as nvim_lsp

  capabilities = getCapabilities()

  for lspdef in *servers do
    if type(lspdef) == "table"
      server = lspdef.server
      lspdef.server = nil

      lspdef.on_attach = on_attach if not lspdef.on_attach
      lspdef.capabilities = capabilities if not lspdef.capabilities

      nvim_lsp[server].setup(lspdef)
    else
      nvim_lsp[lspdef].setup({
        on_attach: on_attach
        capabilities: capabilities
      })

  -- lua
  runtime_path = vim.split(package.path, ";")
  table.insert(runtime_path, "lua/?.lua")
  table.insert(runtime_path, "lua/?/init.lua")

  nvim_lsp.sumneko_lua.setup({
    on_attach: on_attach
    capabilities: capabilities
    cmd: {"@luals@/bin/lua-language-server"}
    settings:
      Lua:
        runtime:
          -- Tell the language server which version of Lua you're using
          -- (most likely LuaJIT in the case of Neovim)
          version: "LuaJIT"
          -- Setup your lua path
          path: runtime_path
        diagnostics:
          -- Get the language server to recognize the `vim` global
          globals: {"vim"}
        workspace:
          -- Make the server aware of Neovim runtime files
          library: vim.api.nvim_get_runtime_file("", true)
        -- Do not send telemetry data containing a randomized but unique identifier
        telemetry:
          enable: false,
  })
