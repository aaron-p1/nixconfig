import "luasnip" as ls
import "luasnip.util.events"
import "luasnip.nodes.absolute_indexer" as ai
import "luasnip.extras" as lx
import "luasnip.extras.fmt" as lf
import "luasnip.extras.expand_conditions" as conds

-- LuaSnip
export ls = ls
-- standard nodes
export {
  snippet: s
  snippet_node: sn
  indent_snippet_node: isn
  text_node: t
  insert_node: i
  function_node: f
  choice_node: c
  dynamic_node: d
  restore_node: r
} = ls

export ai = ai

-- extra nodes
export {
 lambda: l
 rep: rep
 partial: p
 match: m
 nonempty: n
 dynamic_lambda: dl
} = lx

-- fmt
export {
 :fmt
 :fmta
} = lf

export conds = conds
export events = events

-- Helper
-- Nodes
-- match capture
export mc = (group, _then, _else) ->
  assert(_then, "You have to pass at least 2 arguments")
  return f((_, snip) ->
    cap = snip.captures[group]
    return if cap ~= nil and cap ~= "" then _then else (_else or ""))

-- applyCapture
-- types = [ "capture" = nodes ]
export ac = (pos, group, types) ->
  d(pos, (_, snip) -> sn(nil, types[snip.captures[group]]))

-- Conditions
export firstLine = -> vim.fn.line(".") == 1
export firstInFile = (line_to_cursor, matched_trigger) ->
  firstLine() and line_to_cursor == matched_trigger


-- Snippet construction Helper
-- Snip
export readTemplateFile = (name) ->
  path = vim.fn.stdpath("config") ..
    "/lua/plugins/luasnip/snippets/file-templates/files"

  filename = "#{path}/#{name}"

  return vim.fn.join(vim.fn.readfile(filename), "\n")

-- Opts
export oFileStart = {condition: firstInFile, show_condition: firstLine}
